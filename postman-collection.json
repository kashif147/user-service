{
  "info": {
    "name": "User Service - Multi-Tenant Azure Authentication",
    "description": "Complete API collection for testing multi-tenant user service with Azure AD B2C and Entra ID authentication, including tenant isolation features",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string"
    },
    {
      "key": "b2cToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "entraToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "internalToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenantId",
      "value": "tenant-001",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{internalToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Azure AD B2C Authentication",
          "item": [
            {
              "name": "B2C Authorization URL",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://projectshellab2c.b2clogin.com/projectshellab2c.onmicrosoft.com/oauth2/v2.0/authorize?p=B2C_1_projectshell&client_id=e9460e2d-29d1-4711-be7e-e1e92d1370ef&nonce=defaultNonce&redirect_uri=http://localhost:4000/auth/azure-portal&scope=openid&response_type=code&state=12345",
                  "protocol": "https",
                  "host": ["projectshellab2c", "b2clogin", "com"],
                  "path": [
                    "projectshellab2c",
                    "onmicrosoft",
                    "com",
                    "oauth2",
                    "v2.0",
                    "authorize"
                  ],
                  "query": [
                    {
                      "key": "p",
                      "value": "B2C_1_projectshell"
                    },
                    {
                      "key": "client_id",
                      "value": "e9460e2d-29d1-4711-be7e-e1e92d1370ef"
                    },
                    {
                      "key": "nonce",
                      "value": "defaultNonce"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "http://localhost:4000/auth/azure-portal"
                    },
                    {
                      "key": "scope",
                      "value": "openid"
                    },
                    {
                      "key": "response_type",
                      "value": "code"
                    },
                    {
                      "key": "state",
                      "value": "12345"
                    }
                  ]
                },
                "description": "Get authorization URL for Azure AD B2C login. Copy this URL to browser to initiate B2C login flow."
              }
            },
            {
              "name": "B2C Token Exchange",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"code\": \"{{$randomString}}\",\n  \"state\": \"12345\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/azure-portal",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "azure-portal"]
                },
                "description": "Exchange authorization code for tokens. Use the code from B2C callback."
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.token) {",
                      "        pm.collectionVariables.set('b2cToken', response.token);",
                      "        pm.collectionVariables.set('internalToken', response.token);",
                      "        ",
                      "        // Decode token to get user info",
                      "        const tokenParts = response.token.split('.');",
                      "        const payload = JSON.parse(atob(tokenParts[1]));",
                      "        ",
                      "        pm.collectionVariables.set('userId', payload.sub);",
                      "        pm.collectionVariables.set('tenantId', payload.tid);",
                      "        ",
                      "        console.log('B2C Token stored:', response.token);",
                      "        console.log('User ID:', payload.sub);",
                      "        console.log('Tenant ID:', payload.tid);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Azure AD (Entra ID) Authentication",
          "item": [
            {
              "name": "Entra ID Authorization URL",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://login.microsoftonline.com/{{tenantId}}/oauth2/v2.0/authorize?client_id=e9460e2d-29d1-4711-be7e-e1e92d1370ef&response_type=code&redirect_uri=http://localhost:4000/auth/azure-crm&scope=openid&state=12345",
                  "protocol": "https",
                  "host": ["login", "microsoftonline", "com"],
                  "path": ["{{tenantId}}", "oauth2", "v2.0", "authorize"],
                  "query": [
                    {
                      "key": "client_id",
                      "value": "e9460e2d-29d1-4711-be7e-e1e92d1370ef"
                    },
                    {
                      "key": "response_type",
                      "value": "code"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "http://localhost:4000/auth/azure-crm"
                    },
                    {
                      "key": "scope",
                      "value": "openid"
                    },
                    {
                      "key": "state",
                      "value": "12345"
                    }
                  ]
                },
                "description": "Get authorization URL for Azure AD (Entra ID) login. Copy this URL to browser to initiate Entra ID login flow."
              }
            },
            {
              "name": "Entra ID Token Exchange",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"code\": \"{{$randomString}}\",\n  \"state\": \"12345\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/azure-crm",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "azure-crm"]
                },
                "description": "Exchange authorization code for tokens. Use the code from Entra ID callback."
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.token) {",
                      "        pm.collectionVariables.set('entraToken', response.token);",
                      "        pm.collectionVariables.set('internalToken', response.token);",
                      "        ",
                      "        // Decode token to get user info",
                      "        const tokenParts = response.token.split('.');",
                      "        const payload = JSON.parse(atob(tokenParts[1]));",
                      "        ",
                      "        pm.collectionVariables.set('userId', payload.sub);",
                      "        pm.collectionVariables.set('tenantId', payload.tid);",
                      "        ",
                      "        console.log('Entra Token stored:', response.token);",
                      "        console.log('User ID:', payload.sub);",
                      "        console.log('Tenant ID:', payload.tid);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "General CRM Authentication",
          "item": [
            {
              "name": "Register User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"tenantId\": \"{{tenantId}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/general-crm/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "general-crm", "register"]
                },
                "description": "Register a new user with tenant ID"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.token) {",
                      "        pm.collectionVariables.set('internalToken', response.token);",
                      "        ",
                      "        // Decode token to get user info",
                      "        const tokenParts = response.token.split('.');",
                      "        const payload = JSON.parse(atob(tokenParts[1]));",
                      "        ",
                      "        pm.collectionVariables.set('userId', payload.sub);",
                      "        pm.collectionVariables.set('tenantId', payload.tid);",
                      "        ",
                      "        console.log('Registration Token stored:', response.token);",
                      "        console.log('User ID:', payload.sub);",
                      "        console.log('Tenant ID:', payload.tid);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Login User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/general-crm/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "general-crm", "login"]
                },
                "description": "Login with email and password"
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.token) {",
                      "        pm.collectionVariables.set('internalToken', response.token);",
                      "        ",
                      "        // Decode token to get user info",
                      "        const tokenParts = response.token.split('.');",
                      "        const payload = JSON.parse(atob(tokenParts[1]));",
                      "        ",
                      "        pm.collectionVariables.set('userId', payload.sub);",
                      "        pm.collectionVariables.set('tenantId', payload.tid);",
                      "        ",
                      "        console.log('Login Token stored:', response.token);",
                      "        console.log('User ID:', payload.sub);",
                      "        console.log('Tenant ID:', payload.tid);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "Get all users (tenant-isolated)"
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Get specific user by ID (tenant-isolated)"
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Update user information (tenant-isolated)"
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Delete user (tenant-isolated)"
          }
        }
      ]
    },
    {
      "name": "Role Management",
      "item": [
        {
          "name": "Get All Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "roles"]
            },
            "description": "Get all roles (tenant-isolated)"
          }
        },
        {
          "name": "Create Role",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Role\",\n  \"code\": \"TEST\",\n  \"description\": \"Test role for tenant isolation\",\n  \"permissions\": [\"read:test\", \"write:test\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "roles"]
            },
            "description": "Create new role (tenant-isolated)"
          }
        },
        {
          "name": "Get Role by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/roles/:roleId",
              "host": ["{{baseUrl}}"],
              "path": ["api", "roles", ":roleId"]
            },
            "description": "Get specific role by ID (tenant-isolated)"
          }
        },
        {
          "name": "Update Role",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Role\",\n  \"description\": \"Updated description\",\n  \"permissions\": [\"read:test\", \"write:test\", \"delete:test\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/roles/:roleId",
              "host": ["{{baseUrl}}"],
              "path": ["api", "roles", ":roleId"]
            },
            "description": "Update role (tenant-isolated)"
          }
        },
        {
          "name": "Delete Role",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/roles/:roleId",
              "host": ["{{baseUrl}}"],
              "path": ["api", "roles", ":roleId"]
            },
            "description": "Delete role (tenant-isolated)"
          }
        }
      ]
    },
    {
      "name": "User Roles & Permissions",
      "item": [
        {
          "name": "Get User Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "roles"]
            },
            "description": "Get user's roles (tenant-isolated)"
          }
        },
        {
          "name": "Assign Role to User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"roleId\": \"{{$randomString}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "roles"]
            },
            "description": "Assign role to user (tenant-isolated)"
          }
        },
        {
          "name": "Remove Role from User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/roles/:roleId",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "roles", ":roleId"]
            },
            "description": "Remove role from user (tenant-isolated)"
          }
        },
        {
          "name": "Get User Permissions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "permissions"]
            },
            "description": "Get user's permissions (tenant-isolated)"
          }
        }
      ]
    },
    {
      "name": "Token Management",
      "item": [
        {
          "name": "Validate Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{internalToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tokens/validate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tokens", "validate"]
            },
            "description": "Validate JWT token"
          }
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{$randomString}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tokens/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tokens", "refresh"]
            },
            "description": "Refresh JWT token"
          }
        },
        {
          "name": "Revoke Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{internalToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{internalToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tokens/revoke",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tokens", "revoke"]
            },
            "description": "Revoke JWT token"
          }
        }
      ]
    },
    {
      "name": "Health & Info",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check service health"
          }
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/info",
              "host": ["{{baseUrl}}"],
              "path": ["api", "info"]
            },
            "description": "Get API information"
          }
        },
        {
          "name": "Swagger Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api-docs",
              "host": ["{{baseUrl}}"],
              "path": ["api-docs"]
            },
            "description": "Access Swagger API documentation"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default tenant ID if not set",
          "if (!pm.collectionVariables.get('tenantId')) {",
          "    pm.collectionVariables.set('tenantId', 'tenant-001');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper content type', function () {",
          "    if (pm.response.headers.get('Content-Type')) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ]
      }
    }
  ]
}
